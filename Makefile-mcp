# Makefile for Tidy MCP Server
ROOT_DIR:=$(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))
CONDA_ENV=$(shell basename ${ROOT_DIR})

# Default target
.PHONY: help
help:
	@echo "Tidy MCP Server - Available Commands:"
	@echo ""
	@echo "üîß Setup & Installation:"
	@echo "  setup-env    - Create conda environment and install package in editable mode"
	@echo "  install      - Install package in editable mode in existing environment"
	@echo "  install-dev  - Install package with development dependencies"
	@echo "  uninstall    - Uninstall the package from the environment"
	@echo ""
	@echo "üöÄ Development:"
	@echo "  run          - Run the MCP server"
	@echo "  run-cli      - Run the MCP server using the CLI tool"
	@echo "  run-module   - Run the MCP server as a Python module"
	@echo "  dev          - Run the server in development mode with auto-reload"
	@echo ""
	@echo "üß™ Testing & Quality:"
	@echo "  test         - Run the test suite"
	@echo "  test-verbose - Run tests with verbose output"
	@echo "  lint         - Run code linting with flake8"
	@echo "  format       - Format code with black"
	@echo "  check        - Run all quality checks (lint + format + test)"
	@echo ""
	@echo "üì¶ Building & Distribution:"
	@echo "  build        - Build the package distribution"
	@echo "  clean-build  - Clean build artifacts"
	@echo "  dist         - Create distribution packages"
	@echo ""
	@echo "üßπ Maintenance:"
	@echo "  clean        - Remove conda environment and clean build artifacts"
	@echo "  clean-env    - Remove only the conda environment"
	@echo "  info         - Show environment and package information"
	@echo "  deps         - Show installed dependencies"
	@echo ""
	@echo "üîó Integration:"
	@echo "  configure-gemini - Configure Gemini slash commands"
	@echo "  simulate-gemini-mcp     - Simulate MCP note-taking workflow"
	@echo ""
	@echo "üì¶ NPM Package Management:"
	@echo "  update-npm    - Update npm packages to latest versions"
	@echo "  update-npm-global - Update global npm packages"
	@echo "  check-npm-outdated - Check for outdated npm packages"
	@echo "  update-npm-all - Update both local and global npm packages"
	@echo "  update-gemini-cli - Update Gemini CLI to latest version"
	@echo "  update-claude-cli - Update Claude CLI to latest version"
	@echo "  update-ai-clis - Update both Gemini and Claude CLIs"
	@echo ""
	@echo "üß™ Testing:"
	@echo "  test-plantuml - Test PlantUML functionality"
	@echo ""
	@echo "üìö Documentation:"
	@echo "  docs         - Generate documentation"
	@echo "  readme       - Update README with current package info"

# =============================================================================
# Setup & Installation
# =============================================================================

# Create conda environment and install dependencies
.PHONY: setup-env
setup-env:
	@echo "üîß Creating conda environment '${CONDA_ENV}'..."
	conda create -n ${CONDA_ENV} python=3.12 pip -y
	@echo "üì¶ Installing package in editable mode..."
	conda run -n ${CONDA_ENV} pip install -e .
	@echo "‚úÖ MCP environment setup complete!"
	@echo "To activate the environment: conda activate ${CONDA_ENV}"

# Install package in existing environment
.PHONY: install
install:
	@echo "üì¶ Installing package in ${CONDA_ENV} environment..."
	conda run -n ${CONDA_ENV} pip install -e .
	@echo "‚úÖ Package installed!"

# Install development dependencies
.PHONY: install-dev
install-dev:
	@echo "üîß Installing package with development dependencies..."
	conda run -n ${CONDA_ENV} pip install -e ".[dev]"
	@echo "‚úÖ Package with dev dependencies installed!"

# Uninstall the package
.PHONY: uninstall
uninstall:
	@echo "üóëÔ∏è  Uninstalling package..."
	conda run -n ${CONDA_ENV} pip uninstall Tidy-mcp -y
	@echo "‚úÖ Package uninstalled!"

# =============================================================================
# Development
# =============================================================================

# Run the MCP server
.PHONY: run
run:
	@echo "üöÄ Starting MCP server..."
	conda run -n ${CONDA_ENV} python src/tidy_mcp/server.py

# Run the MCP server using CLI tool
.PHONY: run-cli
run-cli:
	@echo "üöÄ Starting MCP server via CLI..."
	conda run -n ${CONDA_ENV} tidy-mcp

# Run the MCP server as a Python module
.PHONY: run-module
run-module:
	@echo "üöÄ Starting MCP server as Python module..."
	conda run -n ${CONDA_ENV} python -m tidy_mcp

# Run in development mode (placeholder for future auto-reload)
.PHONY: dev
dev:
	@echo "üîß Starting MCP server in development mode..."
	@echo "Note: Auto-reload not yet implemented, using standard run"
	conda run -n ${CONDA_ENV} python src/tidy_mcp/server.py

# =============================================================================
# Testing & Quality
# =============================================================================

# Run tests
.PHONY: test
test:
	@echo "üß™ Running test suite..."
	conda run -n ${CONDA_ENV} python -m pytest tst/ -v

# Run tests with verbose output
.PHONY: test-verbose
test-verbose:
	@echo "üß™ Running tests with verbose output..."
	conda run -n ${CONDA_ENV} python -m pytest tst/ -vv --tb=short

# Run code linting
.PHONY: lint
lint:
	@echo "üîç Running code linting..."
	conda run -n ${CONDA_ENV} flake8 src/ tst/ --max-line-length=88 --extend-ignore=E203,W503

# Format code
.PHONY: format
format:
	@echo "üé® Formatting code with black..."
	conda run -n ${CONDA_ENV} black src/ tst/ --line-length=88

# Run all quality checks
.PHONY: check
check: lint format test
	@echo "‚úÖ All quality checks passed!"

# =============================================================================
# Building & Distribution
# =============================================================================

# Build the package
.PHONY: build
build:
	@echo "üî® Building package..."
	conda run -n ${CONDA_ENV} python -m build

# Clean build artifacts
.PHONY: clean-build
clean-build:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf build/ dist/ *.egg-info/
	@echo "‚úÖ Build artifacts cleaned!"

# Create distribution packages
.PHONY: dist
dist: clean-build build
	@echo "üì¶ Distribution packages created in dist/"

# =============================================================================
# Maintenance
# =============================================================================

# Clean up everything
.PHONY: clean
clean: clean-build clean-env
	@echo "üßπ All cleanup complete!"

# Clean up conda environment only
.PHONY: clean-env
clean-env:
	@echo "üóëÔ∏è  Removing conda environment '${CONDA_ENV}'..."
	conda env remove -n ${CONDA_ENV} -y
	@echo "‚úÖ Environment removed!"

# Show environment info
.PHONY: info
info:
	@echo "üìä Environment Information:"
	@echo "=========================="
	@echo "Project root: ${ROOT_DIR}"
	@echo "Conda environment: ${CONDA_ENV}"
	@echo ""
	@echo "Conda environments:"
	conda info --envs | grep ${CONDA_ENV} || echo "Environment '${CONDA_ENV}' not found"
	@echo ""
	@echo "Package information:"
	conda run -n ${CONDA_ENV} python -c "import tidy_mcp; print(f'Version: {tidy_mcp.__version__}'); print(f'Description: {tidy_mcp.__description__}')" 2>/dev/null || echo "Package not installed"
	@echo ""
	@echo "Commands:"
	@echo "  Activate: conda activate ${CONDA_ENV}"
	@echo "  Deactivate: conda deactivate"

# Show dependencies
.PHONY: deps
deps:
	@echo "üì¶ Installed Dependencies:"
	conda run -n ${CONDA_ENV} pip list

# =============================================================================
# Integration
# =============================================================================

.PHONY: configure-gemini simulate-gemini-mcp

# Configure Gemini slash commands
configure-gemini:
	@echo "üîó Configuring Gemini slash commands..."
	mkdir -p ${ROOT_DIR}/.gemini/
	ln -sf ${ROOT_DIR}/prompts/commands ${ROOT_DIR}/.gemini/commands
	@echo "‚úÖ Gemini slash commands configured!"

# Simulate MCP note-taking workflow
simulate-gemini-mcp:
	@echo "üé≠ Simulating MCP note-taking workflow..."
	jq '"cd \(.mcpServers.tidy_mcp.cwd); \(.mcpServers.tidy_mcp.command) \(.mcpServers.tidy_mcp.args | join($$ARGS.positional[0]))"' \
		-r .gemini/settings.json --args " "

# Configure Claude MCP
# https://claudelog.com/configuration/#mcp-configuration
configure-claude:
	@echo "üîó Configuring Claude MCP ..."
	mkdir -p ${ROOT_DIR}/.claude/
	jq -n '{}' \
		| jq --arg pwd "${ROOT_DIR}" --arg cmd $(shell conda run -n ${CONDA_ENV} which python | grep python) \
			'.projects["\($$pwd)"].mcpServers.tidy_mcp.command = "\($$cmd)"' \
		| jq --arg pwd "${ROOT_DIR}" \
			'.projects["\($$pwd)"].mcpServers.tidy_mcp.args = ["-m", "tidy_mcp"]' \
	> ${ROOT_DIR}/.claude/settings.local.json
	@# For claude code
	@# claude mcp add -s project -t stdio tidy_mcp "$(shell conda run -n ${CONDA_ENV} which python | grep python)" "-m" "tidy_mcp"
	jq -n '{}' \
		| jq --arg pwd "${ROOT_DIR}" --arg cmd $(shell conda run -n ${CONDA_ENV} which python | grep python) \
			 '.mcpServers.tidy_mcp.command = "\($$cmd)"' \
		| jq '.mcpServers.tidy_mcp.args = ["-m", "tidy_mcp"]' \
		| jq '.mcpServers.tidy_mcp.type = "stdio"' \
		| jq '.mcpServers.tidy_mcp.env = {}' \
	> ${ROOT_DIR}/.mcp.json
	@echo "‚úÖ Claude mcp commands configured!"

# Simulate Claude MCP 
simulate-claude-mcp:
	@echo "üé≠ Simulating Claude MCP note-taking workflow..."
	cat .claude/settings.local.json \
		| jq --arg pwd "${ROOT_DIR}" \
		'[.projects["\($$pwd)"].mcpServers.tidy_mcp.command] + .projects["\($$pwd)"].mcpServers.tidy_mcp.args | join(" ")'

# =============================================================================
# Documentation
# =============================================================================

# Generate documentation (placeholder)
.PHONY: docs
docs:
	@echo "üìö Documentation generation not yet implemented"
	@echo "Current documentation is in README.md"

# Update README with current package info
.PHONY: readme
readme:
	@echo "üìù Updating README with current package information..."
	@echo "Package version: $(shell conda run -n ${CONDA_ENV} python -c "import tidy_mcp; print(tidy_mcp.__version__)" 2>/dev/null || echo "unknown")"
	@echo "README.md is up to date"

# =============================================================================
# NPM Package Management
# =============================================================================

# Update Gemini CLI
.PHONY: update-gemini-cli
update-gemini-cli: ## Update Gemini CLI to latest version
	@echo "ü§ñ Updating Gemini CLI..."
	npm update -g @google/gemini-cli
	@echo "‚úÖ Gemini CLI updated!"
# Update Claude CLI (if using Anthropic's CLI)
.PHONY: update-claude-cli
update-claude-cli: ## Update Claude CLI to latest version
	@echo "ü§ñ Updating Claude CLI..."
	@if command -v claude >/dev/null 2>&1; then \
		npm update -g @anthropic-ai/claude-code; \
		echo "‚úÖ Claude CLI updated!"; \
	else \
		echo "‚ùå Claude CLI not found. Install with: npm install -g @anthropic-ai/claude-code"; \
	fi

# Update both Gemini and Claude CLIs
.PHONY: update-ai-clis
update-ai-clis: update-gemini-cli update-claude-cli ## Update both Gemini and Claude CLIs
	@echo "‚úÖ All AI CLIs updated!"

# Test PlantUML functionality
.PHONY: test-plantuml
test-plantuml: ## Test PlantUML functionality
	@echo "üå± Testing PlantUML functionality..."
	conda run -n ${CONDA_ENV} python src/tidy_mcp/plantuml.py
	@echo "‚úÖ PlantUML test completed!"